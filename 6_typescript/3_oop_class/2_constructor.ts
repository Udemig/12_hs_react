/*
 ! Constructor - Ä°nÅŸa Methodu
 * Contructor methodu oluÅŸturulan nesnenin deÄŸerlerini dÄ±ÅŸarÄ±dan almaya yarar.
 * Constructor sayesinde bir class'tan oluÅŸturulan bÃ¼tÃ¼n nesneler birbirinin kopyasÄ± olmaz.
 * Conksiyon new anahtar kelimesi ile class'Ä± Ã§aÄŸrÄ±ldÄ±ÄŸÄ±nda ilk Ã§alÄ±ÅŸan kod constructordur.
 * Constructor ile class'a gelen parametrelerle eriÅŸebiliriz.
*/

class Person {
  // 1) sÄ±nÄ±fÄ±n ana Ã¶zelliklerini belirle
  ad: string;
  soyad: string;
  yas: number;

  // 2) constructor yardÄ±mÄ±yla dÄ±ÅŸarÄ±dan deÄŸiÅŸkenlere deÄŸer atamasÄ± yapabiliyoruz
  constructor(yeni_ad: string, yeni_soyad: string, yeni_yas: number) {
    this.ad = yeni_ad;
    this.soyad = yeni_soyad;
    this.yas = yeni_yas;
  }
}

const kisi1 = new Person("Burak", "Musa", 45);
const kisi2 = new Person("Can", "Ã‡imen", 24);
console.log(kisi1);
console.log(kisi2);

/*
 ! Soru
 * Bir teknolojik/ev aleti iÃ§in bir class oluÅŸturun
 * Bu class'tan oluÅŸturduÄŸunu nesneler, deÄŸerlerini constructor'dan alsÄ±n.
 * Class en az 4 Ã¶zellik ve 1 methoda sahip olsun.
 * Bu class'tan en az 1 Ã¶rnek oluÅŸturun (new)
*/

// cevap
class Laptop {
  marka: string;
  model: string;
  islemci: string;
  ram: number;

  constructor(marka: string, model: string, islemci: string, ram: number) {
    this.marka = marka;
    this.model = model;
    this.islemci = islemci;
    this.ram = ram;
  }

  toggle(open: boolean) {
    console.log(open ? "Pc aÃ§Ä±lÄ±yor" : "Pc kapanÄ±yor");
  }
}

const myLaptop = new Laptop("Apple", "MacBook Pro", "M1 Pro", 16);

// cevap
class BeyazEsya {
  ad: string;
  marka: string;
  model: number;
  ciftkapi: boolean;

  constructor(yeni_ad: string, yeni_marka: string, yeni_model: number, yeni_ciftkapi: boolean) {
    this.ad = yeni_ad;
    this.marka = yeni_marka;
    this.model = yeni_model;
    this.ciftkapi = yeni_ciftkapi;
  }

  urunBilgisi(): string {
    return `ÃœrÃ¼n: ${this.ad}, Marka: ${this.marka}, Model: ${this.model}, Ã‡ift KapÄ±: ${
      this.ciftkapi ? "Evet" : "HayÄ±r"
    }`;
  }

  modelGuncelle(yeniModel: number): void {
    this.model = yeniModel;
    console.log(`${this.ad} model yÄ±lÄ± gÃ¼ncellendi: ${this.model}`);
  }
}

// cevap
class TeknolojikAlet {
  marka: string;
  model: string;
  fiyat: number;

  constructor(marka: string, model: string, fiyat: number) {
    this.marka = marka;
    this.model = model;
    this.fiyat = fiyat;
  }

  bilgiGoster(): void {
    console.log(`ğŸ“± Teknolojik Alet: 
        Marka: ${this.marka}
        Model: ${this.model}
        Fiyat: ${this.fiyat} TL`);
  }
}

const telefon = new TeknolojikAlet("Apple", "iPhone 14", 45000);
telefon.bilgiGoster();

// cevap
class Device {
  ad: string;
  model: string;
  year: number;
  portable: boolean;

  constructor(ad: string, model: string, year: number, portable: boolean) {
    this.ad = ad;
    this.model = model;
    this.year = year;
    this.portable = portable;
  }

  deviceStatus(): void {
    console.log("Ã§alÄ±ÅŸÄ±yor");
  }
}

const pc = new Device("bilgisayar", "asus", 2025, true);
pc.deviceStatus();

// cevap
class WashMachine {
  marka: string;
  kapasite: number;
  renk: string;
  yÄ±l: number;

  constructor(yeni_marka: string, yeni_kapasite: number, yeni_renk: string, yeni_yÄ±l: number) {
    this.marka = yeni_marka;
    this.kapasite = yeni_kapasite;
    this.renk = yeni_renk;
    this.yÄ±l = yeni_yÄ±l;
  }
}
const myMachine = new WashMachine("Bosch", 7, "Beyaz", 2023);
console.log(myMachine);
